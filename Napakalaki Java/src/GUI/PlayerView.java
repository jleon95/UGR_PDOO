/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import NapakalakiGame.Cultist;
import NapakalakiGame.Napakalaki;
import NapakalakiGame.Player;
import NapakalakiGame.Treasure;
import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.border.LineBorder;

/**
 *
 */
public class PlayerView extends javax.swing.JPanel {

    
    Player playerModel;
    Napakalaki napakalakiModel;
    
    public PlayerView() {
        initComponents();
        
        ScrollHidden.getViewport().setOpaque(false);
        ScrollVisible.getViewport().setOpaque(false);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        name = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        level = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        BuyLevels = new javax.swing.JButton();
        MakeVisible = new javax.swing.JButton();
        DiscardTreasures = new javax.swing.JButton();
        ScrollVisible = new javax.swing.JScrollPane();
        visibletreasures = new javax.swing.JPanel();
        ScrollHidden = new javax.swing.JScrollPane();
        hiddentreasures = new javax.swing.JPanel();
        combatLevel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cultist = new GUI.CultistView();

        jLabel6.setText("jLabel6");

        jButton4.setText("jButton4");

        setMaximumSize(new java.awt.Dimension(432, 419));

        name.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        name.setForeground(new java.awt.Color(204, 204, 204));
        name.setText(" ");
        name.setMaximumSize(new java.awt.Dimension(258, 22));
        name.setMinimumSize(new java.awt.Dimension(258, 22));
        name.setPreferredSize(new java.awt.Dimension(258, 22));

        jLabel3.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(204, 204, 204));
        jLabel3.setText("Nivel:");

        level.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        level.setForeground(new java.awt.Color(204, 204, 204));
        level.setText(" ");

        jLabel5.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(204, 204, 204));
        jLabel5.setText("Tesoros visibles:");

        jLabel7.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(204, 204, 204));
        jLabel7.setText("Tesoros ocultos (Max. 3):");

        BuyLevels.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        BuyLevels.setText("Comprar niveles");
        BuyLevels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuyLevelsActionPerformed(evt);
            }
        });

        MakeVisible.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        MakeVisible.setText("Equipar");
        MakeVisible.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MakeVisibleActionPerformed(evt);
            }
        });

        DiscardTreasures.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        DiscardTreasures.setText("Descartar");
        DiscardTreasures.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiscardTreasuresActionPerformed(evt);
            }
        });

        ScrollVisible.setBackground(new java.awt.Color(255, 255, 255));
        ScrollVisible.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ScrollVisible.setOpaque(false);

        visibletreasures.setBackground(new java.awt.Color(255, 255, 255));
        visibletreasures.setOpaque(false);
        ScrollVisible.setViewportView(visibletreasures);

        ScrollHidden.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ScrollHidden.setFocusTraversalPolicyProvider(true);
        ScrollHidden.setOpaque(false);

        hiddentreasures.setOpaque(false);
        ScrollHidden.setViewportView(hiddentreasures);

        combatLevel.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        combatLevel.setForeground(new java.awt.Color(204, 204, 204));

        jLabel4.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(204, 204, 204));
        jLabel4.setText("Nivel de combate:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(level, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BuyLevels)
                        .addGap(18, 18, 18)
                        .addComponent(MakeVisible)
                        .addGap(18, 18, 18)
                        .addComponent(DiscardTreasures))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ScrollVisible, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(ScrollHidden, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(combatLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(4, 4, 4)
                        .addComponent(cultist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)))
                .addGap(63, 63, 63))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(cultist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(level, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(combatLevel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ScrollHidden, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                    .addComponent(ScrollVisible))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BuyLevels)
                    .addComponent(MakeVisible)
                    .addComponent(DiscardTreasures))
                .addGap(23, 23, 23))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void BuyLevelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuyLevelsActionPerformed
        
        ArrayList<Treasure> selVisible = getSelectedTreasures(visibletreasures);
        ArrayList<Treasure> selHidden = getSelectedTreasures(hiddentreasures);
        
        napakalakiModel.buyLevels(selVisible,selHidden);
        
        setPlayer (napakalakiModel.getCurrentPlayer());
        
    }//GEN-LAST:event_BuyLevelsActionPerformed

    private void MakeVisibleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MakeVisibleActionPerformed

        
        ArrayList<Treasure> selHidden = getSelectedTreasures(hiddentreasures);
        napakalakiModel.makeTreasuresVisible(selHidden);
        setPlayer (napakalakiModel.getCurrentPlayer());
        
    }//GEN-LAST:event_MakeVisibleActionPerformed

    private void DiscardTreasuresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiscardTreasuresActionPerformed
        
        ArrayList<Treasure> selVisible = getSelectedTreasures(visibletreasures);
        ArrayList<Treasure> selHidden = getSelectedTreasures(hiddentreasures);
        
        napakalakiModel.discardVisibleTreasures(selVisible);
        napakalakiModel.discardHiddenTreasures(selHidden);
        
        setPlayer (napakalakiModel.getCurrentPlayer());
        
    }//GEN-LAST:event_DiscardTreasuresActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BuyLevels;
    private javax.swing.JButton DiscardTreasures;
    private javax.swing.JButton MakeVisible;
    private javax.swing.JScrollPane ScrollHidden;
    private javax.swing.JScrollPane ScrollVisible;
    private javax.swing.JLabel combatLevel;
    private GUI.CultistView cultist;
    private javax.swing.JPanel hiddentreasures;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel level;
    private javax.swing.JLabel name;
    private javax.swing.JPanel visibletreasures;
    // End of variables declaration//GEN-END:variables


    public void setPlayer(Player p){
        
        playerModel = p;
        
        name.setText(playerModel.getName());
        level.setText(Integer.toString(playerModel.getLevels()));
        combatLevel.setText(Integer.toString(playerModel.getCombatLevelGUI()));
        fillTreasurePanel(visibletreasures, playerModel.getVisibleTreasures());
        fillTreasurePanel(hiddentreasures, playerModel.getHiddenTreasures());
        Cultist Ccard = p.getMyCultistCard();
        
        if (Ccard != null) {
            
            cultist.setVisible(true);
            cultist.setCultist(Ccard);
        }
        
        else
            
            cultist.setVisible(false);
        
        repaint();
        revalidate();
    }

    public void fillTreasurePanel (JPanel aPanel, ArrayList<Treasure> aList) {
        
        // Se elimina la información antigua
        aPanel.removeAll();
        // Se recorre la lista de tesoros construyendo y añadiendo sus vistas
        // al panel

        Color color = new Color(000000);
        LineBorder Border = new LineBorder(color);
            
        for (Treasure t : aList) {
            
            TreasureView aTreasureView = new TreasureView();
            aTreasureView.setTreasure (t);
            aTreasureView.setVisible(true);
            aTreasureView.setBorder(Border);
            //aTreasureView.setOpaque(false);
            aPanel.add(aTreasureView);
        }
        
        //aPanel.setOpaque(false);
        
        // Se fuerza la actualización visual del panel
        aPanel.repaint();
        aPanel.revalidate();
    }
    
    public void setNapakalaki (Napakalaki n) {
        
        napakalakiModel = n;
    }
    
    public ArrayList<Treasure> getSelectedTreasures(JPanel aPanel) {
        
        // Se recorren los tesoros que contiene el panel,
        // almacenando en un vector aquellos que están seleccionados.
        // Finalmente se devuelve dicho vector.
        TreasureView tv;
        ArrayList<Treasure> output = new ArrayList();
        
        for (Component c : aPanel.getComponents()) {
            
            tv = (TreasureView) c;
            if (tv.isSelected())
                
                output.add(tv.getTreasure());
        }

        return output;
    }
    
    public void setEnable(boolean enable) {
        
        BuyLevels.setEnabled(enable);
        MakeVisible.setEnabled(enable);
        DiscardTreasures.setEnabled(enable);
        
        repaint();
    }
}
